{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Quelle Race voulez vous choisr ? (Elfe/Humain) :Humain\n",
      "Quelle type voulez vous choisr ? (Magicien/Magicien Noir/Voleur)Magicien\n",
      "Classe Magicien Humain\n",
      "----------------\n",
      "Point de Vie : 100\n",
      "Attaque Magique :10\n",
      "Attaque Physique : 10\n",
      "Sorts : Feu\n",
      "Sorts : Taillade (CàC)\n",
      "Sorts : Heal\n",
      "Sort Ultime : Buff 50% des stats\n",
      "<------------------------------->\n",
      "Valider vous votre choix ? (oui/non) : oui\n",
      "Personnage choisie\n",
      "Quelle Race voulez vous choisr ? (Elfe/Humain) :Humain\n",
      "Quelle type voulez vous choisr ? (Magicien/Magicien Noir/Voleur)Magicien\n",
      "Classe Magicien Humain\n",
      "----------------\n",
      "Point de Vie : 100\n",
      "Attaque Magique :10\n",
      "Attaque Physique : 10\n",
      "Sorts : Feu\n",
      "Sorts : Taillade (CàC)\n",
      "Sorts : Heal\n",
      "Sort Ultime : Buff 50% des stats\n",
      "<------------------------------->\n",
      "Valider vous votre choix ? (oui/non) : oui\n",
      "Personnage choisie\n",
      "Les Joueur sont prêt...\n",
      "<------------------------------->\n"
     ]
    }
   ],
   "source": [
    "sort = \"Sorts : \"\n",
    "ult = \"Sort Ultime : \"\n",
    "pv = \"Point de Vie : \"\n",
    "atm = \"Attaque Magique :\"\n",
    "atp = \"Attaque Physique : \"\n",
    "\n",
    "\n",
    "class Perso:\n",
    "\n",
    "    def __init__(self):\n",
    "        self.PV = 100\n",
    "\n",
    "\n",
    "# Création de la Classe Magicien\n",
    "class Magicien(Perso):\n",
    "    def __init__(self):\n",
    "        super().__init__()\n",
    "\n",
    "\n",
    "# Création de la Classe Voleur\n",
    "class Voleur(Perso):\n",
    "    def __init__(self):\n",
    "        super().__init__()\n",
    "        print((\"Classe Voleur (WIP)\"))\n",
    "        print(\"-----------------------\")\n",
    "        self.ATK_M = 5\n",
    "        self.ATK_P = 15\n",
    "        self.sort_1 = \"\"\n",
    "        self.sort_2 = \"\"\n",
    "        self.sort_3 = \"\"\n",
    "        self.sort_U = \"\"\n",
    "\n",
    "\n",
    "# Création de la Classe Pretre\n",
    "class Pretre(Perso):\n",
    "    def __init__(self):\n",
    "        super().__init__()\n",
    "        print(\"Classe Pretre (WIP)\")\n",
    "        print(\"-----------------------\")\n",
    "        self.ATK_M = 11\n",
    "        self.ATK_P = 9\n",
    "        self.sort_1 = \"\"\n",
    "        self.sort_2 = \"\"\n",
    "        self.sort_3 = \"\"\n",
    "        self.sort_U = \"\"\n",
    "    # Création des différente statistique du magicien\n",
    "\n",
    "\n",
    "# Creation de la race de magicien \"Elfe\"\n",
    "class Elfe(Magicien):\n",
    "    def __init__(self):\n",
    "        super().__init__()\n",
    "        print(\"Classe Magicien Elfique\")\n",
    "        print(\"-----------------------\")\n",
    "        self.name = \"Magicien Elfique\"\n",
    "        self.ATK_M = 16\n",
    "        self.ATK_P = 4\n",
    "        self.sort_1 = \"Foudre\"  # Degat Magique +chance de stun\n",
    "        self.sort_2 = \"Huldrefolk \"  # Est intouchable pendant 1 tours ne peux utiliser des compétence d'attaque ou prépre une compétence (degat x2)/ utilisable tous les 3tours\n",
    "        self.sort_3 = \"Meditation(WIP)\"  # Entre dans un etat de trans supprime touts les alltération d'etat utilisable tous les 3tours\n",
    "        self.sort_U = \"Heal ou Revive (WIP)(passif)\"  # heal a hauteur de 70pv ou revive si non utilisé\n",
    "\n",
    "\n",
    "# Création de la classe efle noir\n",
    "class Elfe_Noir(Elfe, Magicien):\n",
    "    def __init__(self):\n",
    "        self.PV = 100\n",
    "        super().__init__()\n",
    "        print(\"Classe Magicien Elfique Noir\")\n",
    "        print(\"-----------------------\")\n",
    "        self.name = \"Magicien Elfique Noir\"\n",
    "        self.ATK_M = 18\n",
    "        self.ATK_P = 2\n",
    "        self.sort_1 = \"Foudre Noir\"  # degat magique + chance de stun\n",
    "        self.sort_2 = \"Poison\"  # degat magique sur 3tours\n",
    "        self.sort_3 = \"siphon de vie (WIP)\"  # Absobre la vitalité de l'adversaire a hauteur 40 pv sans limitation à 100 hp -> pendant 1tours\n",
    "        self.sort_U = \"Necromancie (WIP)\"  # Ravive l'ame d'une de ces victime et la force a se battre et lui transfert sa vitalité (15 15 60hp)\n",
    "\n",
    "\n",
    "# Creation de la race de magicien \"Humain\"\n",
    "class Humain(Magicien):\n",
    "    def __init__(self):\n",
    "        print(\"Classe Magicien Humain\")\n",
    "        print(\"----------------\")\n",
    "        super().__init__()\n",
    "        self.name = \"Magicien Humain\"\n",
    "        self.ATK_M = 10\n",
    "        self.ATK_P = 10\n",
    "        self.sort_1 = \"Feu\"  # degat magique + feu\n",
    "        self.sort_2 = \"Taillade (CàC)\"  # degat physique + saignement\n",
    "        self.sort_3 = \"Heal(WIP)\"  # +30hp max=100 /45hp si ult\n",
    "        self.sort_U = \"Buff 50% des stats(WIP)\"  # durée de 2 tours vie exclu\n",
    "\n",
    "\n",
    "# Création de la classe Magicien noir\n",
    "class Humain_Noir(Humain, Magicien):\n",
    "    def __init__(self):\n",
    "        self.PV = 100\n",
    "        print(\"Classe Magicien Noir\")\n",
    "        print(\"----------------\")\n",
    "        super().__init__()\n",
    "        self.name = \"Magicien Humain Noir\"\n",
    "        self.ATK_M = 10\n",
    "        self.ATK_P = 10\n",
    "        self.sort_1 = \"Embrassement noir\"  # degats Magique + feu\n",
    "        self.sort_2 = \"Taillade empoissoné (CàC)\"  # degats physique / 10 degat magique partour tour pendant 2 tours\n",
    "        self.sort_3 = \"Debuff de 25% des Stats Adverse(WIP)\"  # Durée de 2 tours vie exclu\n",
    "        self.sort_U = \"Libération(WIP)\"  # Libération du pouvoir du pacte atk boosté (atk m et p = 20 et vie réduite 50% jusqu'a la fin du combat\n",
    "\n",
    "\n",
    "# Création de la classe Mage Voleur\n",
    "class Mage_Voleur(Humain, Voleur):\n",
    "    def __init__(self):\n",
    "        super().__init__()\n",
    "        print(\"Classe Mage Voleur\")\n",
    "        print(\"----------------\")\n",
    "        self.ATK_M = 9\n",
    "        self.ATK_P = 11\n",
    "        self.sort_1 = \"Feu\"  # degat magique + feu\n",
    "        self.sort_2 = \"Taillade (CàC)\"  # degat physique + saignement\n",
    "        self.sort_3 = \"Heal(WIP)\"  # +30hp max=100 /45hp si ult\n",
    "        self.sort_U = \"Brume(WIP)\"  #\n",
    "\n",
    "\n",
    "class Inquisiteur(Magicien, Pretre):\n",
    "    def __init__(self):\n",
    "        super().__init__()\n",
    "        print(\"Classe Inquisiteur (WIP)\")\n",
    "        print(\"----------------\")\n",
    "        self.ATK_M = 15\n",
    "        self.ATK_P = 5\n",
    "        self.sort_1 = \"(WIP)\"\n",
    "        self.sort_2 = \"(WIP)\"\n",
    "        self.sort_3 = \"(WIP)\"\n",
    "        self.sort_U = \"(WIP)\"\n",
    "\n",
    "\n",
    "# Selecteur\n",
    "valid = str\n",
    "player = 0\n",
    "nbr = 2\n",
    "while player != nbr:\n",
    "    choix_race = input(\"Quelle Race voulez vous choisr ? (Elfe/Humain) :\")\n",
    "    if choix_race == \"Elfe\":\n",
    "        choix_class = input(\"Quelle type voulez vous choisr ? (Elfe/Elfe Noir)\")\n",
    "        if choix_class == \"Elfe\":\n",
    "            Class_Elfe = Elfe()\n",
    "            print(pv + str(Class_Elfe.PV))\n",
    "            print(atm + str(Class_Elfe.ATK_M))\n",
    "            print(atp + str(Class_Elfe.ATK_P))\n",
    "            print(sort + str(Class_Elfe.sort_1))\n",
    "            print(sort + str(Class_Elfe.sort_2))\n",
    "            print(sort + str(Class_Elfe.sort_3))\n",
    "            print(ult + str(Class_Elfe.sort_U))\n",
    "            print(\"<-------------------------->\")\n",
    "            valid = input(\"Valider vous votre choix ? (oui/non) : \")\n",
    "            if valid == \"oui\":\n",
    "                player = player + 1\n",
    "                print(\"Personnage choisie\")\n",
    "                if player == 1:\n",
    "                    Joueur1 = Elfe()\n",
    "\n",
    "                else:\n",
    "                    Joueur2 = Elfe()\n",
    "\n",
    "        elif choix_class == \"Elfe Noir\":\n",
    "\n",
    "            Class_darkElfe = Elfe_Noir()\n",
    "            print(pv + str(Class_darkElfe.PV))\n",
    "            print(atm + str(Class_darkElfe.ATK_M))\n",
    "            print(atp + str(Class_darkElfe.ATK_P))\n",
    "\n",
    "            print(sort + str(Class_darkElfe.sort_1))\n",
    "            print(sort + str(Class_darkElfe.sort_2))\n",
    "            print(sort + str(Class_darkElfe.sort_3))\n",
    "            print(ult + str(Class_darkElfe.sort_U))\n",
    "            print(\"<------------------------------->\")\n",
    "            valid = input(\"Valider vous votre choix ? (oui/non) : \")\n",
    "            if valid == \"oui\":\n",
    "                player = player + 1\n",
    "                print(\"Personnage choisie\")\n",
    "                if player == 1:\n",
    "                    Joueur1 = Elfe_Noir()\n",
    "\n",
    "                else:\n",
    "                    Joueur2 = Elfe_Noir()\n",
    "\n",
    "            else:  # Arret du programme si aucune race n'est reconnu\n",
    "                print(\"Aucune Classe Correspondente\")\n",
    "                raise SystemExit\n",
    "\n",
    "    elif choix_race == \"Humain\":\n",
    "        choix_class = input(\"Quelle type voulez vous choisr ? (Magicien/Magicien Noir/Voleur)\")\n",
    "        if choix_class == \"Magicien\":\n",
    "\n",
    "            Class_H = Humain()\n",
    "            print(pv + str(Class_H.PV))\n",
    "            print(atm + str(Class_H.ATK_M))\n",
    "            print(atp + str(Class_H.ATK_P))\n",
    "\n",
    "            print(sort + str(Class_H.sort_1))\n",
    "            print(sort + str(Class_H.sort_2))\n",
    "            print(sort + str(Class_H.sort_3))\n",
    "            print(ult + str(Class_H.sort_U))\n",
    "            print(\"<------------------------------->\")\n",
    "            valid = input(\"Valider vous votre choix ? (oui/non) : \")\n",
    "            if valid == \"oui\":\n",
    "                player = player + 1\n",
    "                print(\"Personnage choisie\")\n",
    "                if player == 1:\n",
    "                    Joueur1 = Humain()\n",
    "\n",
    "                else:\n",
    "                    Joueur2 = Humain()\n",
    "\n",
    "        elif choix_class == \"Magicien Noir\":\n",
    "\n",
    "            Class_darkH = Humain_Noir()\n",
    "            print(pv + str(Class_darkH.PV))\n",
    "            print(atm + str(Class_darkH.ATK_M))\n",
    "            print(atp + str(Class_darkH.ATK_P))\n",
    "\n",
    "            print(sort + str(Class_darkH.sort_1))\n",
    "            print(sort + str(Class_darkH.sort_2))\n",
    "            print(sort + str(Class_darkH.sort_3))\n",
    "            print(ult + str(Class_darkH.sort_U))\n",
    "            print(\"<------------------------------->\")\n",
    "            valid = input(\"Valider vous votre choix ? (oui/non) : \")\n",
    "            if valid == \"oui\":\n",
    "                player = player + 1\n",
    "                print(\"Personnage choisie\")\n",
    "                if player == 1:\n",
    "                    Joueur1 = Humain_Noir()\n",
    "                else:\n",
    "                    Joueur2 = Humain_Noir()\n",
    "        elif choix_class == \"Mage Voleur\":\n",
    "            Class_MV = Mage_Voleur()\n",
    "            print(pv + str(Class_MV.PV))\n",
    "            print(atm + str(Class_MV.ATK_M))\n",
    "            print(atp + str(Class_MV.ATK_P))\n",
    "\n",
    "            print(sort + str(Class_MV.sort_1))\n",
    "            print(sort + str(Class_MV.sort_2))\n",
    "            print(sort + str(Class_MV.sort_3))\n",
    "            print(ult + str(Class_MV.sort_U))\n",
    "            print(\"<------------------------------->\")\n",
    "            valid = input(\"Valider vous votre choix ? (oui/non) : \")\n",
    "            if valid == \"oui\":\n",
    "                player = player + 1\n",
    "                print(\"Personnage choisie\")\n",
    "                if player == 1:\n",
    "                    Joueur1 = Mage_Voleur()\n",
    "\n",
    "                else:\n",
    "                    Joueur2 = Mage_Voleur()\n",
    "\n",
    "        elif choix_class == \"Pretre\":\n",
    "            Class_p = Pretre()\n",
    "            print(pv + str(Class_p.PV))\n",
    "            print(atm + str(Class_p.ATK_M))\n",
    "            print(atp + str(Class_p.ATK_P))\n",
    "\n",
    "            print(sort + str(Class_p.sort_1))\n",
    "            print(sort + str(Class_p.sort_2))\n",
    "            print(sort + str(Class_p.sort_3))\n",
    "            print(ult + str(Class_p.sort_U))\n",
    "            print(\"<------------------------------->\")\n",
    "            valid = input(\"Valider vous votre choix ? (oui/non) : \")\n",
    "            if valid == \"oui\":\n",
    "                player = player + 1\n",
    "                print(\"Personnage choisie\")\n",
    "                if player == 1:\n",
    "\n",
    "                    Joueur1 = Pretre()\n",
    "                else:\n",
    "\n",
    "                    Joueur2 = Pretre()\n",
    "        elif choix_class == \"Inquisiteur\":\n",
    "            Class_I = Inquisiteur()\n",
    "            print(pv + str(Class_I.PV))\n",
    "            print(atm + str(Class_I.ATK_M))\n",
    "            print(atp + str(Class_I.ATK_P))\n",
    "\n",
    "            print(sort + str(Class_I.sort_1))\n",
    "            print(sort + str(Class_I.sort_2))\n",
    "            print(sort + str(Class_I.sort_3))\n",
    "            print(ult + str(Class_I.sort_U))\n",
    "            print(\"<------------------------------->\")\n",
    "            valid = input(\"Valider vous votre choix ? (oui/non) : \")\n",
    "            if valid == \"oui\":\n",
    "                player = player + 1\n",
    "                print(\"Personnage choisie\")\n",
    "                if player == 1:\n",
    "\n",
    "                    Joueur1 = Inquisiteur()\n",
    "                else:\n",
    "\n",
    "                   Joueur2 = Inquisiteur()\n",
    "\n",
    "        else:  # boucle du programme si aucune race n'est reconnu\n",
    "            print(\"Aucune Classe Correspondente\")\n",
    "\n",
    "\n",
    "    else:  # Boucle du programme si aucune race n'est reconnu\n",
    "        print(\"Aucune race Correspondente\")\n",
    "\n",
    "print(\"Les Joueur sont prêt...\")\n",
    "print(\"<------------------------------->\")\n",
    "player = 0\n",
    "while Joueur1.PV >= 1 or Joueur2.PV >= 1: # Tant que les pv du joueur 1 ou joueur 2  sont supérieur a 1\n",
    "    print(\"Joueur 1/Pv restant : \" + str(Joueur1.PV))\n",
    "    choix = input(\"1: \" + Joueur1.sort_1 + \"(\" + str(Joueur1.ATK_M) + \")\" + \" 2 : \" + Joueur1.sort_2 + \"(\" + str(Joueur1.ATK_P) + \")\")\n",
    "    if choix == \"1\":\n",
    "        Joueur2.PV -= Joueur1.ATK_M #reduction de la vie du joueur 2\n",
    "    elif choix == \"2\":\n",
    "        Joueur2.PV -= Joueur1.ATK_P #reduction de la vie du joueur 1\n",
    "\n",
    "    if Joueur2.PV <= 0:      #Sortie de la boucle while\n",
    "        break\n",
    "\n",
    "    print(\"Joueur 2/Pv restant : \" + str(Joueur2.PV))\n",
    "    choix = input(\"1: \" + Joueur2.sort_1 + \"(\" +str(Joueur2.ATK_M)+\")\" \"2 :\"  + Joueur2.sort_2 + \"(\" +str(Joueur2.ATK_P)+\")\" )\n",
    "    if choix == \"1\":\n",
    "        Joueur1.PV -= Joueur2.ATK_P\n",
    "    else:\n",
    "        if choix == \"2\":\n",
    "            Joueur1.PV -= Joueur2.ATK_M\n",
    "\n",
    "    if Joueur1.PV <= 0:     #Sortie de la boucle while\n",
    "        break\n",
    "\n",
    "if Joueur1.PV <= 0 :\n",
    "    print(\"Joueur 2 à gagné\")\n",
    "    del Joueur1      #Suppression du joueur 1\n",
    "else:\n",
    "    print(\"Joueur 1 à gagné\")\n",
    "    del Joueur2      #Suppression du joueur 2\n",
    "\n",
    "\n",
    "raise SystemExit #Sortie du Programme\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Joueur 1 à toi de jouer\n",
      "Vie restante : 100\n",
      "1 : Feu  2 : Taillade (CàC) : 1\n",
      "Joueur 2 à toi de jouer\n",
      "Vie restante : 100\n",
      "1 : Feu  2 : Taillade (CàC) : 1\n",
      "Joueur 1 à toi de jouer\n",
      "Vie restante : 100\n",
      "1 : Feu  2 : Taillade (CàC) : 1\n",
      "Joueur 2 à toi de jouer\n",
      "Vie restante : 100\n",
      "1 : Feu  2 : Taillade (CàC) : 1\n",
      "Joueur 1 à toi de jouer\n",
      "Vie restante : 100\n",
      "1 : Feu  2 : Taillade (CàC) : \n",
      "Joueur 2 à toi de jouer\n",
      "Vie restante : 100\n",
      "1 : Feu  2 : Taillade (CàC) : 1\n",
      "Joueur 1 à toi de jouer\n",
      "Vie restante : 100\n",
      "1 : Feu  2 : Taillade (CàC) : \n",
      "Joueur 2 à toi de jouer\n",
      "Vie restante : 100\n",
      "1 : Feu  2 : Taillade (CàC) : \n",
      "Joueur 1 à toi de jouer\n",
      "Vie restante : 100\n",
      "1 : Feu  2 : Taillade (CàC) : \n",
      "Joueur 2 à toi de jouer\n",
      "Vie restante : 100\n",
      "1 : Feu  2 : Taillade (CàC) : \n",
      "Joueur 1 à toi de jouer\n",
      "Vie restante : 100\n",
      "1 : Feu  2 : Taillade (CàC) : \n",
      "Joueur 2 à toi de jouer\n",
      "Vie restante : 100\n",
      "1 : Feu  2 : Taillade (CàC) : \n",
      "Joueur 1 à toi de jouer\n",
      "Vie restante : 100\n",
      "1 : Feu  2 : Taillade (CàC) : \n",
      "Joueur 2 à toi de jouer\n",
      "Vie restante : 100\n",
      "1 : Feu  2 : Taillade (CàC) : \n",
      "Joueur 1 à toi de jouer\n",
      "Vie restante : 100\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "Interrupted by user",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-3-3db81dbc01c8>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      2\u001b[0m     \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"Joueur 1 à toi de jouer\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      3\u001b[0m     \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"Vie restante : \"\u001b[0m \u001b[1;33m+\u001b[0m \u001b[0mstr\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mVie1\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 4\u001b[1;33m     \u001b[0mchoix_sort\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0minput\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"1 : \"\u001b[0m \u001b[1;33m+\u001b[0m \u001b[0mj1_Sort1\u001b[0m \u001b[1;33m+\u001b[0m \u001b[1;34m\"  \"\u001b[0m \u001b[1;33m+\u001b[0m \u001b[1;34m\"2 : \"\u001b[0m \u001b[1;33m+\u001b[0m \u001b[0mj1_Sort2\u001b[0m \u001b[1;33m+\u001b[0m \u001b[1;34m\" : \"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      5\u001b[0m     \u001b[1;32mif\u001b[0m \u001b[0mchoix_sort\u001b[0m \u001b[1;33m==\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      6\u001b[0m         \u001b[0mVie2\u001b[0m \u001b[1;33m-\u001b[0m \u001b[0mj1_atm\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\ipykernel\\kernelbase.py\u001b[0m in \u001b[0;36mraw_input\u001b[1;34m(self, prompt)\u001b[0m\n\u001b[0;32m    858\u001b[0m                 \u001b[1;34m\"raw_input was called, but this frontend does not support input requests.\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    859\u001b[0m             )\n\u001b[1;32m--> 860\u001b[1;33m         return self._input_request(str(prompt),\n\u001b[0m\u001b[0;32m    861\u001b[0m             \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_parent_ident\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    862\u001b[0m             \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_parent_header\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\ipykernel\\kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[1;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[0;32m    902\u001b[0m             \u001b[1;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    903\u001b[0m                 \u001b[1;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 904\u001b[1;33m                 \u001b[1;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"Interrupted by user\"\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    905\u001b[0m             \u001b[1;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    906\u001b[0m                 \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mwarning\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"Invalid Message:\"\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mexc_info\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mTrue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m: Interrupted by user"
     ]
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
